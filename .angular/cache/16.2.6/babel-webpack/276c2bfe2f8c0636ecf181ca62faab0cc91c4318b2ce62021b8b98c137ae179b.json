{"ast":null,"code":"import { catchError, map, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.HTTP_URL = 'https://www.googleapis.com/youtube/v3/';\n    this.HTTP_KEY = 'AIzaSyCaIsx1V1ywnN-Selao8dbuKMf2_a-BOuY';\n  }\n  searchItems(value) {\n    return this.http.get(`${this.HTTP_URL}search?key=${this.HTTP_KEY}&type=video&part=snippet&maxResults=8&q=${value}`).pipe(map(resp => {\n      const ids = resp.items.map(item => item.id.videoId).join(',');\n      return ids;\n    }), switchMap(ids => this.http.get(`${this.HTTP_URL}videos?key=${this.HTTP_KEY}&id=${ids}&part=snippet,statistics`)), catchError(err => of(err)));\n  }\n  getItem(ids) {\n    return this.http.get(`${this.HTTP_URL}videos?key=${this.HTTP_KEY}&id=${ids}&part=snippet,statistics`);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","map","of","switchMap","ApiService","constructor","http","HTTP_URL","HTTP_KEY","searchItems","value","get","pipe","resp","ids","items","item","id","videoId","join","err","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Documents\\Learning\\RS\\Angular\\YouTube-app5\\sashapt-ANGULAR2023Q4\\src\\app\\youtube\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport {\n  Observable, catchError, map, of, switchMap,\n} from 'rxjs';\nimport { IResponse } from '../models/search-response.model';\nimport { IItem } from '../models/search-item.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  private HTTP_URL = 'https://www.googleapis.com/youtube/v3/';\n\n  private HTTP_KEY = 'AIzaSyCaIsx1V1ywnN-Selao8dbuKMf2_a-BOuY';\n\n  constructor(private http: HttpClient) {}\n\n  searchItems(value: string): Observable<IResponse | HttpErrorResponse> {\n    return this.http\n      .get<IResponse>(\n      `${this.HTTP_URL}search?key=${this.HTTP_KEY}&type=video&part=snippet&maxResults=8&q=${value}`,\n    )\n      .pipe(\n        map((resp: IResponse) => {\n          const ids: string = resp.items\n            .map((item: IItem) => item.id.videoId)\n            .join(',');\n          return ids;\n        }),\n        switchMap((ids: string) => this.http.get<IResponse>(\n          `${this.HTTP_URL}videos?key=${this.HTTP_KEY}&id=${ids}&part=snippet,statistics`,\n        )),\n        catchError((err: HttpErrorResponse) => of(err)),\n      );\n  }\n\n  getItem(ids: string): Observable<IResponse> {\n    return this.http.get<IResponse>(\n      `${this.HTTP_URL}videos?key=${this.HTTP_KEY}&id=${ids}&part=snippet,statistics`,\n    );\n  }\n}\n"],"mappings":"AAEA,SACcA,UAAU,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QACrC,MAAM;;;AAOb,OAAM,MAAOC,UAAU;EAKrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,QAAQ,GAAG,wCAAwC;IAEnD,KAAAC,QAAQ,GAAG,yCAAyC;EAErB;EAEvCC,WAAWA,CAACC,KAAa;IACvB,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CACJ,GAAG,IAAI,CAACJ,QAAQ,cAAc,IAAI,CAACC,QAAQ,2CAA2CE,KAAK,EAAE,CAC9F,CACEE,IAAI,CACHX,GAAG,CAAEY,IAAe,IAAI;MACtB,MAAMC,GAAG,GAAWD,IAAI,CAACE,KAAK,CAC3Bd,GAAG,CAAEe,IAAW,IAAKA,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,CACrCC,IAAI,CAAC,GAAG,CAAC;MACZ,OAAOL,GAAG;IACZ,CAAC,CAAC,EACFX,SAAS,CAAEW,GAAW,IAAK,IAAI,CAACR,IAAI,CAACK,GAAG,CACtC,GAAG,IAAI,CAACJ,QAAQ,cAAc,IAAI,CAACC,QAAQ,OAAOM,GAAG,0BAA0B,CAChF,CAAC,EACFd,UAAU,CAAEoB,GAAsB,IAAKlB,EAAE,CAACkB,GAAG,CAAC,CAAC,CAChD;EACL;EAEAC,OAAOA,CAACP,GAAW;IACjB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAClB,GAAG,IAAI,CAACJ,QAAQ,cAAc,IAAI,CAACC,QAAQ,OAAOM,GAAG,0BAA0B,CAChF;EACH;EAAC,QAAAQ,CAAA,G;qBA9BUlB,UAAU,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVvB,UAAU;IAAAwB,OAAA,EAAVxB,UAAU,CAAAyB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}