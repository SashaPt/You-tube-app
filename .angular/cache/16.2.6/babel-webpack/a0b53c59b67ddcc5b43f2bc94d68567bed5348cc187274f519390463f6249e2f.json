{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class YoutubeService {\n  // private HTTP_KEY = 'AIzaSyCaIsx1V1ywnN-Selao8dbuKMf2_a-BOuY';\n  constructor(http) {\n    this.http = http;\n    this.HTTP_URL = 'https://www.googleapis.com/youtube/v3/';\n  }\n  searchItems(value, limit = 8) {\n    const params = new HttpParams().set('type', 'video').set('part', 'snippet').set('maxResults', limit).set('q', value);\n    return this.http.get(`${this.HTTP_URL}search?`, {\n      params\n    }).pipe(map(resp => {\n      const ids = resp.items.map(item => item.id.videoId).join(',');\n      return ids;\n    }), switchMap(ids => this.getItem(ids)));\n  }\n  getItem(ids) {\n    return this.http.get(`${this.HTTP_URL}videos?id=${ids}&part=snippet,statistics`);\n  }\n  static #_ = this.ɵfac = function YoutubeService_Factory(t) {\n    return new (t || YoutubeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: YoutubeService,\n    factory: YoutubeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","map","switchMap","YoutubeService","constructor","http","HTTP_URL","searchItems","value","limit","params","set","get","pipe","resp","ids","items","item","id","videoId","join","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Documents\\Learning\\RS\\Angular\\YouTube-app5\\sashapt-ANGULAR2023Q4\\src\\app\\youtube\\services\\youtube.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, map, switchMap } from 'rxjs';\nimport { IItem } from '../models/search-item.model';\nimport { IResponse } from '../models/search-response.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class YoutubeService {\n  private HTTP_URL = 'https://www.googleapis.com/youtube/v3/';\n\n  // private HTTP_KEY = 'AIzaSyCaIsx1V1ywnN-Selao8dbuKMf2_a-BOuY';\n\n  constructor(private http: HttpClient) {}\n\n  searchItems(value: string, limit = 8): Observable<IResponse> {\n    const params = new HttpParams()\n      .set('type', 'video')\n      .set('part', 'snippet')\n      .set('maxResults', limit)\n      .set('q', value);\n\n    return this.http.get<IResponse>(`${this.HTTP_URL}search?`, { params }).pipe(\n      map((resp: IResponse) => {\n        const ids: string = resp.items\n          .map((item: IItem) => item.id.videoId)\n          .join(',');\n        return ids;\n      }),\n      switchMap((ids: string) => this.getItem(ids))\n    );\n  }\n\n  getItem(ids: string): Observable<IResponse> {\n    return this.http.get<IResponse>(\n      `${this.HTTP_URL}videos?id=${ids}&part=snippet,statistics`\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,GAAG,EAAEC,SAAS,QAAQ,MAAM;;;AAOjD,OAAM,MAAOC,cAAc;EAGzB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,QAAQ,GAAG,wCAAwC;EAIpB;EAEvCC,WAAWA,CAACC,KAAa,EAAEC,KAAK,GAAG,CAAC;IAClC,MAAMC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CACpBA,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CACtBA,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC,CACxBE,GAAG,CAAC,GAAG,EAAEH,KAAK,CAAC;IAElB,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAY,GAAG,IAAI,CAACN,QAAQ,SAAS,EAAE;MAAEI;IAAM,CAAE,CAAC,CAACG,IAAI,CACzEZ,GAAG,CAAEa,IAAe,IAAI;MACtB,MAAMC,GAAG,GAAWD,IAAI,CAACE,KAAK,CAC3Bf,GAAG,CAAEgB,IAAW,IAAKA,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,CACrCC,IAAI,CAAC,GAAG,CAAC;MACZ,OAAOL,GAAG;IACZ,CAAC,CAAC,EACFb,SAAS,CAAEa,GAAW,IAAK,IAAI,CAACM,OAAO,CAACN,GAAG,CAAC,CAAC,CAC9C;EACH;EAEAM,OAAOA,CAACN,GAAW;IACjB,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAClB,GAAG,IAAI,CAACN,QAAQ,aAAaS,GAAG,0BAA0B,CAC3D;EACH;EAAC,QAAAO,CAAA,G;qBA7BUnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}